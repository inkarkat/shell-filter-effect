#!/bin/bash
set -o pipefail

: ${PIPEDEFAULTPIPE_COMMAND_JOINER=|}

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: cat FILE [...] | %q %s\n' "$(basename "$1")" '[-p|--paginate] -c|--command "COMMANDLINE [-c ...] | [--] SIMPLECOMMAND [...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Pipe into COMMANDs if standard output goes to the terminal, but if this command
is part of a pipeline, do nothing.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --paginate|-p	Send the output of COMMANDs to the pager (${PAGER}).
    --command|-c CMD	Pipe the input into CMD if it's not piped somewhere
			else. Multiple CMDs (and SIMPLECOMMAND) are combined as
			pipelines, too.
HELPTEXT
}

isPager=
commands=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--paginate|-p)	shift; isPager=t;;
	--command|-c)	shift; commands+="${commands:+ $PIPEDEFAULTPIPE_COMMAND_JOINER }$1"; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 0 ]; then
    # Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
    # undo the effects of eval.
    printf -v quotedSimpleCommand '%q ' "$@"
    commands+="${commands:+ $PIPEDEFAULTPIPE_COMMAND_JOINER }${quotedSimpleCommand% }"
fi
if [ -z "$commands" ]; then
    echo 'ERROR: No COMMAND(s) specified; need to pass -c|--command "COMMANDLINE", or SIMPLECOMMAND.'
    echo
    printUsage "$0"
    exit 2
fi >&2


[ -t 1 ] || exec cat
typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS); [ "$isPager" ] || pager=()

eval "$commands" "${pager:+|}" '"${pager[@]}"'
