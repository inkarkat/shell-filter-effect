#!/bin/bash
set -o pipefail

printUsage()
{
    cat <<HELPTEXT
If piping into COMMANDS does not succeed, pipe the duplicated input into
ALT-COMMANDS (one after the other, until one succeeds) (Or just print it as-is
and return the original exit status, if none is specified.)
HELPTEXT
    printf 'Usage: cat FILE [...] | %q %s\n' "$(basename "$1")" '[-o|--or "ALT-COMMANDLINE" [-o ...]] -c|--command "COMMANDLINE [-c ...] | [--] SIMPLECOMMAND [...] [-?|-h|--help]'
}

isNeedEval=
typeset -a commands=()
typeset -a altCommands=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--command|-c)	shift; commands+=(${commands:+;} "$1"); isNeedEval=t; shift;;
	--or|-o)	shift; altCommands+=("$1"); shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 0 ]; then
    if [ "$isNeedEval" ]; then
	# Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
	# undo the effects of eval.
	commands+=(${commands:+;} $(printf '%q ' "$@"))
    else
	commands=("$@")
    fi
fi
if [ ${#commands[@]} -eq 0 ]; then
    echo >&2 'ERROR: No COMMAND(s) specified; need to pass -c|--command "COMMANDLINE", or SIMPLECOMMAND.'
    exit 2
fi

TMPFILE="$(mktemp --tmpdir "$(basename -- "$0")-XXXXXX" 2>/dev/null || echo "${TEMP:-/tmp}/$(basename -- "$0").$$$RANDOM")"
[ "${DEBUG:-}" ] || trap 'rm -f "$TMPFILE" 2>/dev/null' EXIT

tee "$TMPFILE" | if [ "$isNeedEval" ]; then
    eval "${commands[@]}"
else
    "${commands[@]}"
fi && exit

status=$?
if [ ${#altCommands[@]} -eq 0 ]; then
    cat -- "$TMPFILE"
    exit $status
else
    for altCommand in "${altCommands[@]}"
    do
	cat -- "$TMPFILE" | eval "$altCommand" && break
    done
fi
