#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-w|--non-whitespace] [-X|--abort] -c|--command "COMMANDLINE" [-c ...] | [--] SIMPLECOMMAND [...] [-?|-h|--help]'
    printf 'Usage: cat FILE [...] | %q %s\n' "$(basename "$1")" '[-w|--non-whitespace] [-X|--abort]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Succeed only if output is piped into the command / generated by COMMAND, and
suppress all output.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --non-whitespace|-w	Output that does not contain at least one non-whitespace
			character is treated like no output and causes the
			command to fail.
    --abort|-X		Don't slurp in all remaining output, but abort early.
			Note: This can cause the output command to fail with a
			"broken pipe" error, but if you suppress standard error
			and don't have "pipefail" set, this can avoid
			unnecessary computation.
    --command|-c CMD	The command line to be executed for output, instead of
			reading from standard input. When this is a simple
			command, it can also be passed as such. Note: The exit
			status of the command is lost; whether there's output or
			not is all that matters.
EXIT STATUS:
    0	Output has been read and suppressed.
    1	No output received.
    2	Bad invocation, wrong or missing command-line arguments.
HELPTEXT
}

pattern='.'
typeset -a onOutput=(exec cat)
isNeedEval=
typeset -a commands=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--non-whitespace|-w)
			shift; pattern='[^[:space:]]';;
	--abort|-X)	shift; onOutput=(exit 0);;
	--command|-c)	shift; commands+=(${commands:+;} "$1"); isNeedEval=t; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 0 ]; then
    if [ "$isNeedEval" ]; then
	# Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
	# undo the effects of eval.
	printf -v quotedSimpleCommand '%q ' "$@"
	commands+=(${commands:+;} "${quotedSimpleCommand% }")
    else
	commands=("$@")
    fi
fi

commandOutput()
{
    if [ "$isNeedEval" ]; then
	eval "${commands[@]}"
    else
	"${commands[@]}"
    fi
}

checkForOutput()
{
    while :
    do
	IFS=$'\n' read -r line || { [[ "$line" =~ $pattern ]]; exit $?; }
	if [[ "$line" =~ $pattern ]]; then
	    # Slurp the remainder of the input.
	    "${onOutput[@]}" >/dev/null 2>&1
	fi
    done
    exit 1
}

# Note: No "set pipefail" here to suppress failures of COMMAND(s).
eval "${commands[*]:+commandOutput | }checkForOutput"
