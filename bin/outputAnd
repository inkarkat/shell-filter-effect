#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: cat FILE [...] | %q %s\n' "$(basename "$1")" '[-w|--non-whitespace] [-b|--before|-B|--before-command BEFORE-COMMANDLINE [...]] [-o|--or "NOOUT-COMMANDLINE" [...]] -c|--command "COMMANDLINE" [-c ...] | [--] SIMPLECOMMAND [...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
If there's output, execute COMMAND(s) after the output is printed.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
    --non-whitespace|-w	    Output needs to contain at least one non-whitespace
			    character to be accepted.
    --before|-b		    Execute COMMAND(s) before the output is printed.
    --before-command|-B	BEFORE-COMMANDLINE
			    Execute BEFORE-COMMANDLINEs before the output is
			    printed. If these fail, COMMAND(s) after the output
			    will not run.
    --or|-o NOOUT-COMMANDLINE
			    Execute NOOUT-COMMANDLINE if no (accepted) output
			    has occurred. With this, you can handle both
			    outcomes; i.e. either this or COMMAND(s) will be
			    executed, never both.
EXIT STATUS:
    0	Output occurred, and COMMAND(s) executed successfully.
    1	No output has been piped into the command (and NOOUT-COMMANDLINE
	executed successfully).
    2	Bad invocation, wrong or missing command-line arguments.
    125	COMMAND(s) have failed.
    126	NOOUT-COMMANDLINE has failed.

SEE ALSO:
Use ifne if you want to execute COMMAND(s) when output is available and have
COMMAND(s) consume that output (instead of printing it beforehand).
HELPTEXT
}

isNeedEval=
typeset -a commands=()
typeset -a noOutputCommands=()
tester=outputOrError
isNonWhitespace=
isBefore=
typeset -a beforeCommands=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)		shift; printLongUsage "$0"; exit 0;;
	--non-whitespace|-w)	shift; isNonWhitespace=t; tester=nonWhitespaceOutputOrError;;
	--before|-b)		shift; isBefore=t;;
	--before-command|-B)	shift; beforeCommands+=(${beforeCommands:+;} "$1"); shift;;
	--or|-o)		shift; noOutputCommands+=(${noOutputCommands:+;} "$1"); shift;;
	--command|-c)		shift; commands+=(${commands:+;} "$1"); isNeedEval=t; shift;;
	--)			shift; break;;
	-*)			{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)			break;;
    esac
done
if [ $# -ne 0 ]; then
    if [ "$isNeedEval" ]; then
	# Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
	# undo the effects of eval.
	printf -v quotedSimpleCommand '%q ' "$@"
	commands+=(${commands:+;} "${quotedSimpleCommand% }")
    else
	commands=("$@")
    fi
fi
if [ ${#commands[@]} -eq 0 ]; then
    echo >&2 'ERROR: No COMMAND(s) specified; need to pass -c|--command "COMMANDLINE", or SIMPLECOMMAND.'
    exit 2
fi

runCommands()
(
    if [ "$isNeedEval" ]; then
	eval "${commands[@]}"
    else
	"${commands[@]}"
    fi
)


status=1
if [ "$isBefore" ] || [ ${#beforeCommands[@]} -gt 0 ]; then
    isInputAvailable=t

    if [ "$isNonWhitespace" ]; then
	lines=
	while [ "$isInputAvailable" ]
	do
	    if ! IFS=$'\n' read -r line; then
		isInputAvailable=
		lines+="$line"
	    else
		lines+="${line}
"
	    fi
	    if [[ "$lines" =~ [^[:space:]] ]]; then
		status=0
		[ ! "$isBefore" ] || runCommands || status=125
		[ ${#beforeCommands[@]} -eq 0 ] || eval "${beforeCommands[@]}" || status=125
		break
	    fi
	done
	printf '%s' "$lines"
    else
	IFS=$'\n' read -r line || isInputAvailable=
	if [ "$line" ]; then
	    status=0
	    [ ! "$isBefore" ] || runCommands || status=125
	    [ ${#beforeCommands[@]} -eq 0 ] || eval "${beforeCommands[@]}" || status=125
	    printf "%s${isInputAvailable:+\\n}" "$line"
	fi
    fi

    if [ "$isInputAvailable" ]; then
	cat || status=3	# Can this happen?!
    fi
    [ $status -ne 0 -o ${#beforeCommands[@]} -eq 0 -o ${#commands[@]} -eq 0 ] || runCommands || status=125
else
    if $tester; then
	status=0
	runCommands || status=125
    fi
fi

if [ $status -eq 1 -a ${#noOutputCommands[@]} -gt 0 ]; then
    eval "${noOutputCommands[@]}" || status=126
fi

exit $status
